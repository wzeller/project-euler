#Largest product in a series
#Problem 8
#Find the greatest product of five consecutive digits 
#in the 1000-digit number. [Number below.]

#Finds solution (40824) in .1 seconds.

def findLargestProduct
  
  solution = 0
  last = 4
  n = "73167176531330624919225119674426574742355349194934969835203127745063262395783180169
  8480186947885184385861560789112949495459501737958331952853208805511125406987471585238630
  5071569329096329522744304355766896648950445244523161731856403098711121722383113622298934
  2338030813533627661428280644448664523874930358907296290491560440772390713810515859307960
  8667017242712188399879790879227492190169972088809377665727333001053367881220235421809751
  2545405947522435258490771167055601360483958644670632441572215539753697817977846174064955
  1492908625693219784686224828397224137565705605749026140797296865241453510047482166370484
  4031998900088952434506585412275886668811642717147992444292823086346567481391912316282458
  6178664583591245665294765456828489128831426076900422421902267105562632111110937054421750
  6941658960408071984038509624554443629812309878799272442849091888458015616609791913387549
  9200524063689912560717606058861164671094050775410022569831552000559357297257163626956188
  2670428252483600823257530420752963450"
  dataArray = n.chars.map(&:to_i)

  (0..995).each do |start| 
    possible_sol = dataArray[start..last].inject(:*)
  	solution = possible_sol if possible_sol > solution 
  	last += 1
  end

  solution

end

p findLargestProduct